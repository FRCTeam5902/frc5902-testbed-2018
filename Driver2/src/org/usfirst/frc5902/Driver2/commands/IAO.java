package org.usfirst.frc5902.Driver2.commands;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5902.Driver2.Robot;

/**
 *
 */
public class IAO extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	public double speed;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public IAO(double speed) {
    	this.speed = speed;
    	requires(Robot.intake);
//    	requires(Robot.lights);
    }
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
//    	Robot.lights.Gray();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	//Working Code Below
    	//A is default if Both buttons are pressed, RB is throttle 
    	
//    	if (Robot.oi.AC.getY() < 0) {	    	
//    		System.out.println(1);
    		Robot.intake.AdjustIn(this.speed);
//    	}
//    	if (Robot.oi.AC.getY() > 0) {	    	
//    		System.out.println(2);
//    		Robot.intake.AdjustIn(this.speed);
//    	}
    }
    

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.intake.Stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}